interface MutationResponse {
	code: String!
	success: Boolean!
	message: String!
}

type Response {
  success: Boolean
  error: String
}

type UserProfileRole {
	id: ID!
	name: String!
}

type UserProfile {
	id: ID!
	name: String!
	email: String!
	roles: [UserProfileRole]
}

type Commitment {
	id: ID
	title: String
}

input CommitmentInput {
	id: ID
	title: String
}

# The "Query" type is the root of all GraphQL queries.
type Query {
	userProfile(id: ID): UserProfile
	commitment(id: ID!): Commitment
	commitments: [Commitment]
}

# The mutation root type, used to define all mutations.
type Mutation {
	upsertCommitment(item: CommitmentInput!): Response
	deleteCommitment(id: ID!): Response
}
